# Configure --------------------------------------------------------------------

# Load config file
configfile: "configs/config.yaml"
# Get study names
STUDIES, = glob_wildcards(config["in_sumstat_pattern"])
# Set local rules which don't need to be submitted to the cluster
localrules: all, collate_chroms

# Snakemake rules --------------------------------------------------------------

rule all:
    input: expand("harmonised/{study}.all.sumstats.tsv.gz", study=STUDIES)

rule harmonise_by_chrom:
    """ Runs harmonisation of genotypes for each chromosome individually
    """
    input:
        sumstat="data/sumstats/{study}.sumstats.tsv.gz",
        vcf="data/vcfs/reference_chr{chrom}_vcf.testdata.vcf.gz"
    output:
        sumstat=temp("harmonised/{study}.chr{chrom}.sumstats.tsv.gz"),
        log="logs/harmonise/{study}.chr{chrom}.log.txt.gz"
    params:
        script=config["harmonisation_script"]
    resources:
        mem=2000,
        runtime=24 * 12
    shell:
        "python {params.script} "
        "--sumstats {input.sumstat} "
        "--vcf {input.vcf} "
        "--out {output.sumstat} "
        "--log {output.log} "
        "--only_chrom {wildcards.chrom} "
        "--rsid_col rsID "
        "--chrom_col chrom "
        "--pos_col pos "
        "--effAl_col effect_allele "
        "--otherAl_col other_allele "
        "--eaf_col eaf "
        "--beta_col beta "
        "--maf_palin_threshold 0.42 "
        "--af_vcf_field AF_NFE "
        "--af_vcf_min 0.001 "
        "--infer_strand True "
        "--infer_palin True"

rule collate_chroms:
    """ For each study combines separate chromosomes into a single study.
    """
    input:
        expand("harmonised/{{study}}.chr{chrom}.sumstats.tsv.gz",
               chrom=config["chroms"])
    output:
        "harmonised/{study}.all.sumstats.tsv.gz"
    run:
        import gzip as gz
        header_done = False

        # Open output file
        with gz.open(output[0], "w") as out_handle:

            # Write each input file into the output
            for inf in input:
                with gz.open(inf, "r") as in_handle:

                    # Copy header if not done yet
                    header = in_handle.readline()
                    if not header_done:
                        out_handle.write(header)
                        header_done = True

                    # Copy remanining lines
                    for line in in_handle:
                        out_handle.write(line)
